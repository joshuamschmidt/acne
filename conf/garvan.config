/*
 * -------------------------------------------------
 *  Nextflow config file for running at Garvan SGE
 * -------------------------------------------------
 * Use as follows:
 * nextflow run acne -profile garvan
 */

params {
  config_profile_name = 'Garvan profile'
  config_profile_description = 'Parameters to enable running on Garvan SGE'
  max_cpus = 12
  max_memory = 48.GB
  max_time = 48.h
}

executor {
  queueSize = 50
  pollInterval = '10s'
  submitRateLimit = '50/1min'
}

cleanup = false

docker {
  enabled=false
}

singularity {
      enabled = true
      runOptions = '--bind "\$TMPDIR" --bind "/share/"'
      cacheDir = "/share/ClusterShare/software/contrib/jossch/singularity_images/"
}

process {
    executor = 'sge'
    penv = 'smp'
    queue = 'short.q'
    errorStrategy = 'retry'
    maxRetries = 3
    scratch = true
    stageInMode = 'symlink'
    stageOutMode = 'rsync'

    withName: SAMPLESHEET_CHECK {
      cpus = 1
      memory = 2.GB
      time = 5.m
      errorStrategy = { task.exitStatus in [143,137,104,134,139, 140] ? 'retry' : 'finish' }
      maxRetries = 3
      maxErrors = '-1'
      clusterOptions = { "-S /bin/bash -V -j y -o output.sge -l h_vmem=${task.memory.toGiga().intdiv(task.cpus)}G,mem_requested=${task.memory.toGiga()}G,tmp_requested=2G,tmpfree=5G" }
    }

    withLabel:process_single {
      cpus   = { check_max( 1                  , 'cpus'    ) }
      memory = { check_max( 6.GB * task.attempt, 'memory'  ) }
      time   = { check_max( 4.h  * task.attempt, 'time'    ) }
      errorStrategy = { task.exitStatus in [143,137,104,134,139, 140] ? 'retry' : 'finish' }
      maxRetries = 3
      maxErrors = '-1'
      clusterOptions = { "-S /bin/bash -V -j y -o output.sge -l h_vmem=${task.memory.toGiga().intdiv(task.cpus)}G,mem_requested=${task.memory.toGiga()}G,tmp_requested=30G,tmpfree=35G" }
    }

    withName: PARTITIONGS {
      cpus   = { check_max( 2 * task.attempt, 'cpus' ) }
      memory = { check_max( 16.GB * task.attempt, 'memory' ) }
      time   = { check_max( 30.m * task.attempt, 'time' ) }
      //disk_cpu = '6.GB'
      //disk_cpu = { 3 / task.cpus * (gs_file.size() >> 30) }
      //disk_total = { disk_cpu * task.cpus }
      //def sizeFactor = 3
      //def infile_size = sizeFactor.intdiv(task.cpus) * (gs_file.size() >> 30)
      //def disk_cpu = { infile_size < 2 ? 2 : infile_size.round(0) }
      //def disk_cpu = '6.GB'
      //def disk_total = { disk_cpu * task.cpus }
      errorStrategy = { task.exitStatus in [143,137,104,134,139, 140] ? 'retry' : 'finish' }
      maxRetries = 3
      maxErrors = '-1'

      clusterOptions = { "-S /bin/bash -V -j y -o output.sge -l h_vmem=${task.memory.toGiga().intdiv(task.cpus)}G,mem_requested=${task.memory.toGiga()}G,tmp_requested=20G,tmpfree=20G" }
      //clusterOptions = { "-S /bin/bash -V -j y -o output.sge -l h_vmem=${task.memory.toGiga().intdiv(task.cpus)}G,mem_requested=${task.memory.toGiga()}G,tmp_requested=${disk_cpu.toGiga()}G,tmpfree=${disk_total.toGiga()}G" }

    }

    withName: MAKEPFB {
      cpus   = { check_max( 4 * task.attempt, 'cpus' ) }
      memory = { check_max( 16.GB * task.attempt, 'memory' ) }
      time   = { check_max( 20.m * task.attempt, 'time' ) }
      //disk_cpu = '6.GB'
      //disk_cpu = { 3 / task.cpus * (gs_file.size() >> 30) }
      //disk_total = { disk_cpu * task.cpus }
      //def sizeFactor = 3
      //def infile_size = sizeFactor.intdiv(task.cpus) * (gs_file.size() >> 30)
      //def disk_cpu = { infile_size < 2 ? 2 : infile_size.round(0) }
      //def disk_cpu = '6.GB'
      //def disk_total = { disk_cpu * task.cpus }
      errorStrategy = { task.exitStatus in [143,137,104,134,139, 140] ? 'retry' : 'finish' }
      maxRetries = 3
      maxErrors = '-1'

      clusterOptions = { "-S /bin/bash -V -j y -o output.sge -l h_vmem=${task.memory.toGiga().intdiv(task.cpus)}G,mem_requested=${task.memory.toGiga()}G,tmp_requested=5G,tmpfree=20G" }
      //clusterOptions = { "-S /bin/bash -V -j y -o output.sge -l h_vmem=${task.memory.toGiga().intdiv(task.cpus)}G,mem_requested=${task.memory.toGiga()}G,tmp_requested=${disk_cpu.toGiga()}G,tmpfree=${disk_total.toGiga()}G" }

    }

    withName: SPLITGS {
      cpus   = { check_max( 2 * task.attempt, 'cpus' ) }
      memory = { check_max( 16.GB * task.attempt, 'memory' ) }
      time   = { check_max( 20.m * task.attempt, 'time' ) }
      //disk_cpu = '6.GB'
      //disk_cpu = { 3 / task.cpus * (gs_file.size() >> 30) }
      //disk_total = { disk_cpu * task.cpus }
      //def sizeFactor = 3
      //def infile_size = sizeFactor.intdiv(task.cpus) * (gs_file.size() >> 30)
      //def disk_cpu = { infile_size < 2 ? 2 : infile_size.round(0) }
      //def disk_cpu = '6.GB'
      //def disk_total = { disk_cpu * task.cpus }
      errorStrategy = { task.exitStatus in [143,137,104,134,139, 140] ? 'retry' : 'finish' }
      maxRetries = 3
      maxErrors = '-1'

      clusterOptions = { "-S /bin/bash -V -j y -o output.sge -l h_vmem=${task.memory.toGiga().intdiv(task.cpus)}G,mem_requested=${task.memory.toGiga()}G,tmp_requested=20G,tmpfree=20G" }
      //clusterOptions = { "-S /bin/bash -V -j y -o output.sge -l h_vmem=${task.memory.toGiga().intdiv(task.cpus)}G,mem_requested=${task.memory.toGiga()}G,tmp_requested=${disk_cpu.toGiga()}G,tmpfree=${disk_total.toGiga()}G" }

    }

    withName: PENNCNV_GC {
      cpus = 1
      memory = { check_max( 8.GB * task.attempt, 'memory' ) }
      time   = { check_max( 30.m * task.attempt, 'time' ) }
      errorStrategy = { task.exitStatus in [143,137,104,134,139, 140] ? 'retry' : 'finish' }
      maxRetries = 3
      maxErrors = '-1'
      clusterOptions = { "-S /bin/bash -V -j y -o output.sge -l h_vmem=${task.memory.toGiga().intdiv(task.cpus)}G,mem_requested=${task.memory.toGiga()}G,tmp_requested=1G,tmpfree=1G" }
     }

    withName: PENNCNV_DETECT {
      cpus = 1
      memory = { check_max( 1.GB * task.attempt, 'memory' ) }
      errorStrategy = { task.exitStatus in [143,137,104,134,139, 140] ? 'retry' : 'finish' }
      maxRetries = 3
      maxErrors = '-1'
      clusterOptions = { "-S /bin/bash -V -j y -o output.sge -l h_vmem=${task.memory.toGiga().intdiv(task.cpus)}G,mem_requested=${task.memory.toGiga()}G,tmp_requested=1G,tmpfree=1G" }
    }

    withName: PENNCNV_MERGE {
      cpus = 1
      memory = { check_max( 2.GB * task.attempt, 'memory' ) }
      errorStrategy = { task.exitStatus in [143,137,104,134,139, 140] ? 'retry' : 'finish' }
      maxRetries = 3
      maxErrors = '-1'
      clusterOptions = { "-S /bin/bash -V -j y -o output.sge -l h_vmem=${task.memory.toGiga().intdiv(task.cpus)}G,mem_requested=${task.memory.toGiga()}G,tmp_requested=1G,tmpfree=1G" }
    }

    withName: CONCATENATE_PENN_CALLS {
      cpus = 1
      memory = { check_max( 1.GB * task.attempt, 'memory' ) }
      errorStrategy = { task.exitStatus in [143,137,104,134,139, 140] ? 'retry' : 'finish' }
      maxRetries = 3
      maxErrors = '-1'
      clusterOptions = { "-S /bin/bash -V -j y -o output.sge -l h_vmem=${task.memory.toGiga().intdiv(task.cpus)}G,mem_requested=${task.memory.toGiga()}G,tmp_requested=5G,tmpfree=5G" }
    }

    withName: CONCATENATE_PENN_LOGS {
      cpus = 1
      memory = { check_max( 1.GB * task.attempt, 'memory' ) }
      errorStrategy = { task.exitStatus in [143,137,104,134,139, 140] ? 'retry' : 'finish' }
      maxRetries = 3
      maxErrors = '-1'
      clusterOptions = { "-S /bin/bash -V -j y -o output.sge -l h_vmem=${task.memory.toGiga().intdiv(task.cpus)}G,mem_requested=${task.memory.toGiga()}G,tmp_requested=5G,tmpfree=5G" }
    }

    withName: PENNCNV_FILTER {
      cpus = 1
      memory = { check_max( 1.GB * task.attempt, 'memory' ) }
      errorStrategy = { task.exitStatus in [143,137,104,134,139, 140] ? 'retry' : 'finish' }
      maxRetries = 3
      maxErrors = '-1'
      clusterOptions = { "-S /bin/bash -V -j y -o output.sge -l h_vmem=${task.memory.toGiga().intdiv(task.cpus)}G,mem_requested=${task.memory.toGiga()}G,tmp_requested=5G,tmpfree=5G" }
    }
    
    withName: CONCATENATE_PARTITIONS {
      cpus = 1
      memory = { check_max( 1.GB * task.attempt, 'memory' ) }
      errorStrategy = { task.exitStatus in [143,137,104,134,139, 140] ? 'retry' : 'finish' }
      maxRetries = 3
      maxErrors = '-1'
      clusterOptions = { "-S /bin/bash -V -j y -o output.sge -l h_vmem=${task.memory.toGiga().intdiv(task.cpus)}G,mem_requested=${task.memory.toGiga()}G,tmp_requested=5G,tmpfree=5G" }
    }

}


// divide by cpus? avail_mem = task.memory ? "-m ${task.memory.toBytes().intdiv(task.cpus)}" : ''
// clusterOptions "-l h_vmem=${task.memory.toString().replaceAll(/[\sB]/,'')}"

